// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Root {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  username  String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Admin {
  id          Int          @id @default(autoincrement())
  firstName   String
  lastName    String
  username    String
  email       String       @unique
  password    String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  status      Boolean
  curriculums Curriculum[]
}

model Curriculum {
  id         Int      @id @default(autoincrement())
  area       String
  areaId     String
  abstract   String
  topics     Topics[]
  colorTopic String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  admind     Admin    @relation(fields: [adminId], references: [id])
  adminId    Int
}

model Topics {
  id           Int             @id @default(autoincrement())
  topicId      String
  topic        String
  duration     String
  colorTopic   String
  description  String
  path         String
  branch       String
  questions    QuestionTopic[]
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  curriculum   Curriculum      @relation(fields: [curriculumId], references: [id])
  curriculumId Int
}

model QuestionTopic {
  id            Int              @id @default(autoincrement())
  questionId    String
  questionTitle String
  question      String
  issue         String
  options       OptionQuestion[]
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  topic         Topics           @relation(fields: [topicId], references: [id])
  topicId       Int
}

model OptionQuestion {
  id         Int           @id @default(autoincrement())
  optionId   String
  option     String
  label      String
  color      String
  correct    Boolean
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  question   QuestionTopic @relation(fields: [questionId], references: [id])
  questionId Int
}

model User {
  id           Int       @id @default(autoincrement())
  nombre       String
  apellido     String
  username     String
  email        String    @unique
  password     String
  nivel        String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  organizacion String
  profile      Profile[]
  quizzes      Quizzes[]
  tests        Tests[]
}

model Profile {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  avatar    String
  phrase    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Quizzes {
  id           Int             @id @default(autoincrement())
  area         String
  topicId      String
  topic        String
  respuestas   RespuestaQuiz[]
  calificacion Float?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  estudiante   User            @relation(fields: [estudianteId], references: [id])
  estudianteId Int
}

model RespuestaQuiz {
  id        Int     @id @default(autoincrement())
  question1 String
  question2 String
  question3 String
  question4 String
  question5 String
  quizz     Quizzes @relation(fields: [quizzId], references: [id])
  quizzId   Int
}

model Tests {
  id           Int             @id @default(autoincrement())
  titulo       String
  respuestas   RespuestaTest[]
  calificacion Float?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  estudiante   User            @relation(fields: [estudianteId], references: [id])
  estudianteId Int
}

model RespuestaTest {
  id         Int    @id @default(autoincrement())
  question1  String
  question2  String
  question3  String
  question4  String
  question5  String
  question6  String
  question7  String
  question8  String
  question9  String
  question10 String
  test       Tests  @relation(fields: [testId], references: [id])
  testId     Int
}
